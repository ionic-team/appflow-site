[{"title":"Announcing Web Previews","description":"The easiest way to share what you’re working on with coworkers, stakeholders, and more.","authorName":"Max Lynch","authorEmail":"max@ionic.io","authorUrl":"https://twitter.com/maxlynch","authorImageName":"max-lynch.jpg","slug":"announcing-web-previews","date":"2020-09-20T08:00:00.000Z","contents":"---\ntitle: Announcing Web Previews\nslug: announcing-web-previews\ndescription: The easiest way to share what you’re working on with coworkers, stakeholders, and more.\ndate: 2020-09-20 08:00:00\nauthor: Max Lynch <max@ionic.io>\nauthorUrl: https://twitter.com/maxlynch\nauthorImageName: max-lynch.jpg\nfeaturedImage: web-previews.png\nfeaturedImageAlt: Web Previews\n---\n\nToday, we’re thrilled to announce Web Previews in Appflow, the easiest way to share what you’re working on with coworkers, stakeholders, and more. \n\nWeb Previews represent the next step in our belief in the [web first development strategy](https://ionicframework.com/blog/forget-mobile-first-progressive-web-app-first-is-the-future/), and we’re especially excited for what this feature enables for teams who want a quick and easy way to share pre-production versions of their app, without the overhead and complexity of managing TestFlight, iOS enterprise certs, or any of the more complicated methods of showing off what you’ve built.\n\n<!--more-->\n\nThe entire update is covered [on the Ionic blog](LINK once published). You can also view a short overview video to see Web Previews in action:\n\n<p>\n\n<wistia-video video-id=\"d9zuxeonhd\" />\n","preview":"<p>Today, we’re thrilled to announce Web Previews in Appflow, the easiest way to share what you’re working on with coworkers, stakeholders, and more. </p>\n<p>Web Previews represent the next step in our belief in the <a href=\"https://ionicframework.com/blog/forget-mobile-first-progressive-web-app-first-is-the-future/\">web first development strategy</a>, and we’re especially excited for what this feature enables for teams who want a quick and easy way to share pre-production versions of their app, without the overhead and complexity of managing TestFlight, iOS enterprise certs, or any of the more complicated methods of showing off what you’ve built.</p>\n","html":"<p>Today, we’re thrilled to announce Web Previews in Appflow, the easiest way to share what you’re working on with coworkers, stakeholders, and more. </p>\n<p>Web Previews represent the next step in our belief in the <a href=\"https://ionicframework.com/blog/forget-mobile-first-progressive-web-app-first-is-the-future/\">web first development strategy</a>, and we’re especially excited for what this feature enables for teams who want a quick and easy way to share pre-production versions of their app, without the overhead and complexity of managing TestFlight, iOS enterprise certs, or any of the more complicated methods of showing off what you’ve built.</p>\n<!--more-->\n\n<p>The entire update is covered [on the Ionic blog](LINK once published). You can also view a short overview video to see Web Previews in action:</p>\n<p>\n\n<wistia-video video-id=\"d9zuxeonhd\" />\n","meta":{"title":"Announcing Web Previews","slug":"announcing-web-previews","description":"The easiest way to share what you’re working on with coworkers, stakeholders, and more.","date":"2020-09-20T08:00:00.000Z","author":"Max Lynch <max@ionic.io>","authorUrl":"https://twitter.com/maxlynch","authorImageName":"max-lynch.jpg","featuredImage":"web-previews.png","featuredImageAlt":"Web Previews"},"featuredImage":"web-previews.png","featuredImageAlt":"Web Previews"},{"title":"Building a robust Mobile CI/CD pipeline on Jenkins/Circle CI/Azure/etc.","description":"What does it take to build a scalable, robust Mobile CI/CD pipeline on popular services such as Jenkins, Circle CI, or Azure DevOps?","authorName":"Max Lynch","authorEmail":"max@ionic.io","authorUrl":"https://twitter.com/maxlynch","authorImageName":"max-lynch.jpg","slug":"how-to-build-your-mobile-ci-cd-solution-on-jenkins-circleci-azure-devops","date":"2020-08-18T15:00:00.000Z","contents":"---\ntitle: Building a robust Mobile CI/CD pipeline on Jenkins/Circle CI/Azure/etc.\ndescription: What does it take to build a scalable, robust Mobile CI/CD pipeline on popular services such as Jenkins, Circle CI, or Azure DevOps?\nslug: how-to-build-your-mobile-ci-cd-solution-on-jenkins-circleci-azure-devops\nfeaturedImage: how-to-build-your-mobile-ci-cd-solution-on-jenkins-circleci-azure-devops.png\nfeaturedImageAlt: flow chart showing pipeline to apple app store and google play store\ndate: 2020-08-18 15:00:00\nauthor: Max Lynch <max@ionic.io>\nauthorUrl: https://twitter.com/maxlynch\nauthorImageName: max-lynch.jpg\nrelated:\n  - https://ionicframework.com/resources/webinars/hybrid-app-development-redefined\n  - https://useappflow.com/resources/solving-mobile-cicd-with-appflow\n---\n\nEnterprise teams building mobile apps are looking to add Mobile CI/CD capabilities to their existing CI/CD workflows in use for their backend and frontend web apps.\n\nTeams running or using Jenkins, Circle CI, Azure or AWS CI/CD solutions, and more, often ask how they can start to continuously build, test, and deploy their mobile apps utilizing their existing CI/CD investments.\n\nWhile it’s possible to do so, it’s important to understand the aspects that make Mobile CI/CD uniquely challenging, and why there’s a good chance your team should buy rather than build their own solution for mobile builds.\n\nBefore jumping in, if you’re new to Mobile CI/CD, take a look at our introduction to Mobile CI/CD to understand what tasks are required to build, test, and deploy mobile apps in a continuous fashion.\n\nWith that in mind, what would a team need to build in order to add Mobile CI/CD capabilities to their existing CI/CD service and workflows?\n\n<!--more-->\n\n## Step 1: Integration with Git provider\n\nA source code repository is the central point for any app, so a Mobile CI/CD workflow will need to connect and integrate with your source repository host.\n\nDepending on your provider, this could mean integrating with GitHub Enterprise, GitLab Enterprise, BitBucket, Azure/AWS code hosting, or another popular provider.\n\n## Step 2: Trigger builds on commits\n\nOnce a connection has been made to your source code repository, a system needs to be set up to trigger builds on each commit, across all branches in your project. That means integrating with the API for the given provider, handling web hooks on commits, and then processing the updated code to perform builds.\n\n## Step 3: Run iOS and Android Build Infrastructure\n\nTo perform builds, specialized infrastructure needs to be set up to enable iOS and Android builds at the very least, and possibly builds for web if building Progressive Web Apps or hybrid apps (Ionic/Capacitor, Cordova, React Native, etc).\n\nFor iOS, this means running genuine, legal Mac hardware with updated versions of macOS. Running Mac servers is not straightforward as it’s not as easily or legally virtualized as Linux. Teams will need to run physical mac hardware (such as Mac minis or Macbook Pros) which means data center colocation.\n\nThese servers then need to be orchestrated, routinely patched for security issues, kept up to date with yearly mobile OS and SDK updates.\n\n## Step 4: Make that infrastructure scalable and flexible\n\nOf course, running the server infrastructure for mobile builds is just one piece of the infrastructure puzzle. Mobile builds are resource-intensive, so teams will need to invest in making server resources elastic and scale to meet build demand. This will keep engineers productive and help them avoid wasting valuable time waiting for someone else’s build to finish.\n\n## Step 5: Manage certificates\n\nMobile build tooling requires extensive code signing, which means managing extremely sensitive signing credentials and certificates.\n\nA Mobile CI/CD solution will need a powerful certificate management system that keeps certificates encrypted and secure until needed for code signing.\n\n## Step 6: For Hybrid apps, enable remote deploys\n\nDevelopers of hybrid apps, such as those built with Ionic Framework, Capacitor, Cordova, and React Native, expect to be able to update the web code of their apps remotely and in realtime. That means being able to push fixes and updates without needing to resubmit to the app stores.\n\nA proper Mobile CI/CD solution for these teams will come with remove deploy features to give these developers the agility they expect.\n\n## Step 7: Set up infrastructure to manage development, beta, and production channels\n\nMobile app teams need to deploy different versions of their app to different people, whether those are beta testers, coworkers, stakeholders, or customers.\n\nFor beta testing, teams will need to submit those apps to testing tools such as Testflight.\n\nMany mobile teams utilize homegrown versioning to build beta, testing, and production versions of their app. A Mobile CI/CD solution will need a way to support this use case.\n\n## Step 8: Automatically deploy apps to Apple App Store and Google Play Store\n\nOne of the most time consuming and frustration inducing aspects of mobile development is uploading and publishing apps to the Apple App Store and Google Play Store.\n\nThankfully, these steps can be automated with sufficiently advanced tooling. Mobile CI/CD solutions will likely offer the way to automatically upload builds to the app stores to avoid this tedious process.\n\n## Step 9: Support multiple “build stacks” for different app OS/SDK version requirements\n\nMany apps have different mobile OS and tooling version requirements. Those apps will need to have some control over which version of tools like Xcode, macOS, etc they build on.\n\nA proper Mobile CI/CD solution will enable some control over the build stack for an app.\n\n## Step 10: Set up process to upgrade and security patch operating systems, servers, tooling, and more\n\nA cornerstone of mobile is the (at least!) yearly OS and device refresh and launch cycle.\n\nMobile tooling changes rapidly, far more so than typical backend or frontend environments. New versions of iOS and Android are released, along with new device features, and corresponding API, build tooling, and OS upgrade requirements.\n\nThis means teams need to frequently upgrade servers, operating systems, and build environments.\n\nThis is in addition to the typical work of patching operating systems and tooling for security issues which is a full time job.\n\nMobile CI/CD platforms will upgrade their build environments frequently, and patch security flaws on a constant basis.\n\n## Step 11: Provide a nice UI for the above features\n\nBeyond infrastructure, many of the above processes require UI for users to setup, configure, and monitor their builds. \n\nIt’s likely this UI will need to be built as general purpose CI/CD tooling does not typically have the above features for mobile builds.\n\n## Hiring to build Mobile CI/CD infrastructure\n\nOne thing you’ll note about the above steps is they require a different type of engineering skill than the mobile team has, so your team will need to find a way to hire backend engineers, server administrators, data center administrators, and DevOps engineers.\n\nFor running iOS build infrastructure, teams will also need unique macOS server administrators which is a pretty rare skill as macOS is very rarely used as server infrastructure.\n\n## What about an off-the-shelf solution?\n\nMany mobile teams, when faced with the requirements needed to build scalable, reliable, and secure Mobile CI/CD infrastructure for their mobile apps, realize they would be better served buying an off-the-shelf solution instead of building their own.\n\nThe Mobile CI/CD market has a number of companies providing their solution to the challenges of Mobile CI/CD.\n\nOne of the leaders is [Appflow](https://useappflow.com/), created by the [team](https://ionic.io/) behind [Ionic Framework](https://ionicframework.com/). Appflow is used by thousands of companies and a significant portion of the Fortune 1000, helping teams like Burger King, AAA, and Shipt ensure mobile app quality and ship at the speed of development.\n\nThe Appflow team features some of the leading experts in mobile and backend build infrastructure, and hires for unique experience that mobile teams likely do not have (or need!), so your team does not. The team has spent years building solutions to the above problems and is focused exclusively on providing a Mobile CI/CD solution to teams and enterprise users.\n\n## Conclusion\n\nMobile CI/CD is considerably more complex than traditional CI/CD, and requires specialized skills, server infrastructure, and features. While it’s possible for mobile teams to build their own Mobile CI/CD on top of general purpose CI/CD tooling such as Jenkins or Circle CI, doing so requires a massive investment and hiring for rare engineering skills.\n\nGenerally, teams will want to purchase an off-the-shelf, Mobile-specific solution such as [Appflow](https://useappflow.com/) so they can focus on what they do best: building a great mobile experience.\n\n","preview":"<p>Enterprise teams building mobile apps are looking to add Mobile CI/CD capabilities to their existing CI/CD workflows in use for their backend and frontend web apps.</p>\n<p>Teams running or using Jenkins, Circle CI, Azure or AWS CI/CD solutions, and more, often ask how they can start to continuously build, test, and deploy their mobile apps utilizing their existing CI/CD investments.</p>\n<p>While it’s possible to do so, it’s important to understand the aspects that make Mobile CI/CD uniquely challenging, and why there’s a good chance your team should buy rather than build their own solution for mobile builds.</p>\n<p>Before jumping in, if you’re new to Mobile CI/CD, take a look at our introduction to Mobile CI/CD to understand what tasks are required to build, test, and deploy mobile apps in a continuous fashion.</p>\n<p>With that in mind, what would a team need to build in order to add Mobile CI/CD capabilities to their existing CI/CD service and workflows?</p>\n","html":"<p>Enterprise teams building mobile apps are looking to add Mobile CI/CD capabilities to their existing CI/CD workflows in use for their backend and frontend web apps.</p>\n<p>Teams running or using Jenkins, Circle CI, Azure or AWS CI/CD solutions, and more, often ask how they can start to continuously build, test, and deploy their mobile apps utilizing their existing CI/CD investments.</p>\n<p>While it’s possible to do so, it’s important to understand the aspects that make Mobile CI/CD uniquely challenging, and why there’s a good chance your team should buy rather than build their own solution for mobile builds.</p>\n<p>Before jumping in, if you’re new to Mobile CI/CD, take a look at our introduction to Mobile CI/CD to understand what tasks are required to build, test, and deploy mobile apps in a continuous fashion.</p>\n<p>With that in mind, what would a team need to build in order to add Mobile CI/CD capabilities to their existing CI/CD service and workflows?</p>\n<!--more-->\n\n<h2 id=\"step-1-integration-with-git-provider\">Step 1: Integration with Git provider</h2>\n<p>A source code repository is the central point for any app, so a Mobile CI/CD workflow will need to connect and integrate with your source repository host.</p>\n<p>Depending on your provider, this could mean integrating with GitHub Enterprise, GitLab Enterprise, BitBucket, Azure/AWS code hosting, or another popular provider.</p>\n<h2 id=\"step-2-trigger-builds-on-commits\">Step 2: Trigger builds on commits</h2>\n<p>Once a connection has been made to your source code repository, a system needs to be set up to trigger builds on each commit, across all branches in your project. That means integrating with the API for the given provider, handling web hooks on commits, and then processing the updated code to perform builds.</p>\n<h2 id=\"step-3-run-ios-and-android-build-infrastructure\">Step 3: Run iOS and Android Build Infrastructure</h2>\n<p>To perform builds, specialized infrastructure needs to be set up to enable iOS and Android builds at the very least, and possibly builds for web if building Progressive Web Apps or hybrid apps (Ionic/Capacitor, Cordova, React Native, etc).</p>\n<p>For iOS, this means running genuine, legal Mac hardware with updated versions of macOS. Running Mac servers is not straightforward as it’s not as easily or legally virtualized as Linux. Teams will need to run physical mac hardware (such as Mac minis or Macbook Pros) which means data center colocation.</p>\n<p>These servers then need to be orchestrated, routinely patched for security issues, kept up to date with yearly mobile OS and SDK updates.</p>\n<h2 id=\"step-4-make-that-infrastructure-scalable-and-flexible\">Step 4: Make that infrastructure scalable and flexible</h2>\n<p>Of course, running the server infrastructure for mobile builds is just one piece of the infrastructure puzzle. Mobile builds are resource-intensive, so teams will need to invest in making server resources elastic and scale to meet build demand. This will keep engineers productive and help them avoid wasting valuable time waiting for someone else’s build to finish.</p>\n<h2 id=\"step-5-manage-certificates\">Step 5: Manage certificates</h2>\n<p>Mobile build tooling requires extensive code signing, which means managing extremely sensitive signing credentials and certificates.</p>\n<p>A Mobile CI/CD solution will need a powerful certificate management system that keeps certificates encrypted and secure until needed for code signing.</p>\n<h2 id=\"step-6-for-hybrid-apps-enable-remote-deploys\">Step 6: For Hybrid apps, enable remote deploys</h2>\n<p>Developers of hybrid apps, such as those built with Ionic Framework, Capacitor, Cordova, and React Native, expect to be able to update the web code of their apps remotely and in realtime. That means being able to push fixes and updates without needing to resubmit to the app stores.</p>\n<p>A proper Mobile CI/CD solution for these teams will come with remove deploy features to give these developers the agility they expect.</p>\n<h2 id=\"step-7-set-up-infrastructure-to-manage-development-beta-and-production-channels\">Step 7: Set up infrastructure to manage development, beta, and production channels</h2>\n<p>Mobile app teams need to deploy different versions of their app to different people, whether those are beta testers, coworkers, stakeholders, or customers.</p>\n<p>For beta testing, teams will need to submit those apps to testing tools such as Testflight.</p>\n<p>Many mobile teams utilize homegrown versioning to build beta, testing, and production versions of their app. A Mobile CI/CD solution will need a way to support this use case.</p>\n<h2 id=\"step-8-automatically-deploy-apps-to-apple-app-store-and-google-play-store\">Step 8: Automatically deploy apps to Apple App Store and Google Play Store</h2>\n<p>One of the most time consuming and frustration inducing aspects of mobile development is uploading and publishing apps to the Apple App Store and Google Play Store.</p>\n<p>Thankfully, these steps can be automated with sufficiently advanced tooling. Mobile CI/CD solutions will likely offer the way to automatically upload builds to the app stores to avoid this tedious process.</p>\n<h2 id=\"step-9-support-multiple-build-stacks-for-different-app-ossdk-version-requirements\">Step 9: Support multiple “build stacks” for different app OS/SDK version requirements</h2>\n<p>Many apps have different mobile OS and tooling version requirements. Those apps will need to have some control over which version of tools like Xcode, macOS, etc they build on.</p>\n<p>A proper Mobile CI/CD solution will enable some control over the build stack for an app.</p>\n<h2 id=\"step-10-set-up-process-to-upgrade-and-security-patch-operating-systems-servers-tooling-and-more\">Step 10: Set up process to upgrade and security patch operating systems, servers, tooling, and more</h2>\n<p>A cornerstone of mobile is the (at least!) yearly OS and device refresh and launch cycle.</p>\n<p>Mobile tooling changes rapidly, far more so than typical backend or frontend environments. New versions of iOS and Android are released, along with new device features, and corresponding API, build tooling, and OS upgrade requirements.</p>\n<p>This means teams need to frequently upgrade servers, operating systems, and build environments.</p>\n<p>This is in addition to the typical work of patching operating systems and tooling for security issues which is a full time job.</p>\n<p>Mobile CI/CD platforms will upgrade their build environments frequently, and patch security flaws on a constant basis.</p>\n<h2 id=\"step-11-provide-a-nice-ui-for-the-above-features\">Step 11: Provide a nice UI for the above features</h2>\n<p>Beyond infrastructure, many of the above processes require UI for users to setup, configure, and monitor their builds. </p>\n<p>It’s likely this UI will need to be built as general purpose CI/CD tooling does not typically have the above features for mobile builds.</p>\n<h2 id=\"hiring-to-build-mobile-cicd-infrastructure\">Hiring to build Mobile CI/CD infrastructure</h2>\n<p>One thing you’ll note about the above steps is they require a different type of engineering skill than the mobile team has, so your team will need to find a way to hire backend engineers, server administrators, data center administrators, and DevOps engineers.</p>\n<p>For running iOS build infrastructure, teams will also need unique macOS server administrators which is a pretty rare skill as macOS is very rarely used as server infrastructure.</p>\n<h2 id=\"what-about-an-off-the-shelf-solution\">What about an off-the-shelf solution?</h2>\n<p>Many mobile teams, when faced with the requirements needed to build scalable, reliable, and secure Mobile CI/CD infrastructure for their mobile apps, realize they would be better served buying an off-the-shelf solution instead of building their own.</p>\n<p>The Mobile CI/CD market has a number of companies providing their solution to the challenges of Mobile CI/CD.</p>\n<p>One of the leaders is <a href=\"https://useappflow.com/\">Appflow</a>, created by the <a href=\"https://ionic.io/\">team</a> behind <a href=\"https://ionicframework.com/\">Ionic Framework</a>. Appflow is used by thousands of companies and a significant portion of the Fortune 1000, helping teams like Burger King, AAA, and Shipt ensure mobile app quality and ship at the speed of development.</p>\n<p>The Appflow team features some of the leading experts in mobile and backend build infrastructure, and hires for unique experience that mobile teams likely do not have (or need!), so your team does not. The team has spent years building solutions to the above problems and is focused exclusively on providing a Mobile CI/CD solution to teams and enterprise users.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Mobile CI/CD is considerably more complex than traditional CI/CD, and requires specialized skills, server infrastructure, and features. While it’s possible for mobile teams to build their own Mobile CI/CD on top of general purpose CI/CD tooling such as Jenkins or Circle CI, doing so requires a massive investment and hiring for rare engineering skills.</p>\n<p>Generally, teams will want to purchase an off-the-shelf, Mobile-specific solution such as <a href=\"https://useappflow.com/\">Appflow</a> so they can focus on what they do best: building a great mobile experience.</p>\n","meta":{"title":"Building a robust Mobile CI/CD pipeline on Jenkins/Circle CI/Azure/etc.","description":"What does it take to build a scalable, robust Mobile CI/CD pipeline on popular services such as Jenkins, Circle CI, or Azure DevOps?","slug":"how-to-build-your-mobile-ci-cd-solution-on-jenkins-circleci-azure-devops","featuredImage":"how-to-build-your-mobile-ci-cd-solution-on-jenkins-circleci-azure-devops.png","featuredImageAlt":"flow chart showing pipeline to apple app store and google play store","date":"2020-08-18T15:00:00.000Z","author":"Max Lynch <max@ionic.io>","authorUrl":"https://twitter.com/maxlynch","authorImageName":"max-lynch.jpg","related":["https://ionicframework.com/resources/webinars/hybrid-app-development-redefined","https://useappflow.com/resources/solving-mobile-cicd-with-appflow"]},"featuredImage":"how-to-build-your-mobile-ci-cd-solution-on-jenkins-circleci-azure-devops.png","featuredImageAlt":"flow chart showing pipeline to apple app store and google play store","related":["https://ionicframework.com/resources/webinars/hybrid-app-development-redefined","https://useappflow.com/resources/solving-mobile-cicd-with-appflow"]},{"title":"How Often Should your Mobile Team Ship?","description":"How the best mobile engineering teams work to ship frequently and drive growth","authorName":"Max Lynch","authorEmail":"max@ionic.io","authorUrl":"https://twitter.com/maxlynch","authorImageName":"max-lynch.jpg","slug":"how-often-should-your-mobile-team-be-shipping","date":"2020-08-18T12:00:00.000Z","contents":"---\ntitle: How Often Should your Mobile Team Ship?\ndescription: How the best mobile engineering teams work to ship frequently and drive growth\nslug: how-often-should-your-mobile-team-be-shipping\nfeaturedImage: how-often-should-your-mobile-team-be-shipping.png\nfeaturedImageAlt: figure 8 flow path with clock in the middle\ndate: 2020-08-18 12:00:00\nauthor: Max Lynch <max@ionic.io>\nauthorUrl: https://twitter.com/maxlynch\nauthorImageName: max-lynch.jpg\nrelated:\n  - https://ionicframework.com/resources/webinars/hybrid-app-development-redefined\n  - https://useappflow.com/resources/solving-mobile-cicd-with-appflow\n---\n\nA feature of highly productive engineering teams is their ability to ship new features and updates frequently.\n\nFor backend and frontend web teams, shipping is straightforward: push a commit to a git repo, trigger a build in CI/CD, and deploy a new version of the code on backend infrastructure or a static hosting service.\n\nBut for Mobile, shipping is a completely different beast, requiring a complex chain of events that culminate in an app store publishing and approval process that goes far beyond anything in the backend and frontend worlds.\n\nEven with this considerable complexity, highly productive mobile teams are shipping frequently, with some shipping multiple times per day!\n\nHow do they do it, and how frequently should your mobile teams be shipping? Let’s take a look at some highly productive mobile teams to find out:\n\n<!--more-->\n\n## How 86 400 ships weekly\n\n[86 400](https://www.86400.com.au/), Australia’s first smartbank, knew they had to meet customers where they are: on mobile. So they built the first mobile banking solution for Australia, providing fast access to savings accounts and their whole financial picture. The other thing customers expect? Frequent updates, features, and bug fixes. To do that, 86 400 reached for [Appflow](https://useappflow.com/), the leading Mobile CI/CD platform from the team behind popular open source project Ionic Framework.\n\n86 400 uses Appflow to ship updates weekly, and has used Appflow’s deploy feature to fix bugs in realtime without the delay of republishing to the app stores.\n\nThe team at 86 400 ships at least after each two week sprint, and sometimes more frequently!\n\n## How Napa Group helps Acker meet bi-weekly deadlines\n\nAcker, the world’s largest auction house for wine, engaged app consultancy Napa Group to build a development process that would help meet the need to run bi-weekly auctions on their mobile app.\n\nWith Appflow, Napa Group found a platform that enabled them to ship at the speed of development, pushing app updates daily and having polished, stable releases ready for each bi-weekly auction.\n\nThis development process would have been impossible without a service like Appflow providing a powerful Mobile CI/CD solution and key features such as live deploy.\n\n## How often should your team be shipping?\n\nThe very best engineering teams ship often, even on mobile. These are just two examples of highly productive mobile teams. The overhead of building and publishing mobile apps is no excuse for these productive mobile teams. In fact, most are shipping weekly.\n\nShipping frequently, even weekly, has a number of major benefits:\n\n* Keeps the app top of mind - it shows up on the user’s device in the App Store updates list\n* Frequent updates demonstrate that you’re committed to the app and that it’s still maintained\n* New features drive business value and grow app adoption\n* Engineering morale is tied strongly to shipping\n\nShipping frequently is certainly better than the opposite. So, how do they do it, and how can your team do it, too?\n\nWell, shipping this frequently on mobile wouldn’t be possible without a powerful Mobile CI/CD solution that continuously builds, tests, and integrates a mobile app after each commit. And for hybrid app developers, being able to push web code updates without app store republishing is another key driver of developer agility.\n\nA leading Mobile CI/CD service with the above features is Appflow, which powers apps for companies like Burger King, AAA, and more.\n\n## Get shipping\n\nIf you’re new to Mobile CI/CD, read more about [what Mobile CI/CD is](/blog/what-is-mobile-ci-cd) and how it differs from traditional CI/CD. If you’ve also been exploring building Mobile CI/CD capabilities on top of existing CI/CD infrastructure, take a look at our post on how you could build your own Appflow-style service, and why you might not want to given the complexity of mobile.\n\nEither way, we hope your team is well on its way to shipping at least weekly and delighting users with frequent updates and bug fixes.\n","preview":"<p>A feature of highly productive engineering teams is their ability to ship new features and updates frequently.</p>\n<p>For backend and frontend web teams, shipping is straightforward: push a commit to a git repo, trigger a build in CI/CD, and deploy a new version of the code on backend infrastructure or a static hosting service.</p>\n<p>But for Mobile, shipping is a completely different beast, requiring a complex chain of events that culminate in an app store publishing and approval process that goes far beyond anything in the backend and frontend worlds.</p>\n<p>Even with this considerable complexity, highly productive mobile teams are shipping frequently, with some shipping multiple times per day!</p>\n<p>How do they do it, and how frequently should your mobile teams be shipping? Let’s take a look at some highly productive mobile teams to find out:</p>\n","html":"<p>A feature of highly productive engineering teams is their ability to ship new features and updates frequently.</p>\n<p>For backend and frontend web teams, shipping is straightforward: push a commit to a git repo, trigger a build in CI/CD, and deploy a new version of the code on backend infrastructure or a static hosting service.</p>\n<p>But for Mobile, shipping is a completely different beast, requiring a complex chain of events that culminate in an app store publishing and approval process that goes far beyond anything in the backend and frontend worlds.</p>\n<p>Even with this considerable complexity, highly productive mobile teams are shipping frequently, with some shipping multiple times per day!</p>\n<p>How do they do it, and how frequently should your mobile teams be shipping? Let’s take a look at some highly productive mobile teams to find out:</p>\n<!--more-->\n\n<h2 id=\"how-86-400-ships-weekly\">How 86 400 ships weekly</h2>\n<p><a href=\"https://www.86400.com.au/\">86 400</a>, Australia’s first smartbank, knew they had to meet customers where they are: on mobile. So they built the first mobile banking solution for Australia, providing fast access to savings accounts and their whole financial picture. The other thing customers expect? Frequent updates, features, and bug fixes. To do that, 86 400 reached for <a href=\"https://useappflow.com/\">Appflow</a>, the leading Mobile CI/CD platform from the team behind popular open source project Ionic Framework.</p>\n<p>86 400 uses Appflow to ship updates weekly, and has used Appflow’s deploy feature to fix bugs in realtime without the delay of republishing to the app stores.</p>\n<p>The team at 86 400 ships at least after each two week sprint, and sometimes more frequently!</p>\n<h2 id=\"how-napa-group-helps-acker-meet-bi-weekly-deadlines\">How Napa Group helps Acker meet bi-weekly deadlines</h2>\n<p>Acker, the world’s largest auction house for wine, engaged app consultancy Napa Group to build a development process that would help meet the need to run bi-weekly auctions on their mobile app.</p>\n<p>With Appflow, Napa Group found a platform that enabled them to ship at the speed of development, pushing app updates daily and having polished, stable releases ready for each bi-weekly auction.</p>\n<p>This development process would have been impossible without a service like Appflow providing a powerful Mobile CI/CD solution and key features such as live deploy.</p>\n<h2 id=\"how-often-should-your-team-be-shipping\">How often should your team be shipping?</h2>\n<p>The very best engineering teams ship often, even on mobile. These are just two examples of highly productive mobile teams. The overhead of building and publishing mobile apps is no excuse for these productive mobile teams. In fact, most are shipping weekly.</p>\n<p>Shipping frequently, even weekly, has a number of major benefits:</p>\n<ul>\n<li>Keeps the app top of mind - it shows up on the user’s device in the App Store updates list</li>\n<li>Frequent updates demonstrate that you’re committed to the app and that it’s still maintained</li>\n<li>New features drive business value and grow app adoption</li>\n<li>Engineering morale is tied strongly to shipping</li>\n</ul>\n<p>Shipping frequently is certainly better than the opposite. So, how do they do it, and how can your team do it, too?</p>\n<p>Well, shipping this frequently on mobile wouldn’t be possible without a powerful Mobile CI/CD solution that continuously builds, tests, and integrates a mobile app after each commit. And for hybrid app developers, being able to push web code updates without app store republishing is another key driver of developer agility.</p>\n<p>A leading Mobile CI/CD service with the above features is Appflow, which powers apps for companies like Burger King, AAA, and more.</p>\n<h2 id=\"get-shipping\">Get shipping</h2>\n<p>If you’re new to Mobile CI/CD, read more about <a href=\"/blog/what-is-mobile-ci-cd\">what Mobile CI/CD is</a> and how it differs from traditional CI/CD. If you’ve also been exploring building Mobile CI/CD capabilities on top of existing CI/CD infrastructure, take a look at our post on how you could build your own Appflow-style service, and why you might not want to given the complexity of mobile.</p>\n<p>Either way, we hope your team is well on its way to shipping at least weekly and delighting users with frequent updates and bug fixes.</p>\n","meta":{"title":"How Often Should your Mobile Team Ship?","description":"How the best mobile engineering teams work to ship frequently and drive growth","slug":"how-often-should-your-mobile-team-be-shipping","featuredImage":"how-often-should-your-mobile-team-be-shipping.png","featuredImageAlt":"figure 8 flow path with clock in the middle","date":"2020-08-18T12:00:00.000Z","author":"Max Lynch <max@ionic.io>","authorUrl":"https://twitter.com/maxlynch","authorImageName":"max-lynch.jpg","related":["https://ionicframework.com/resources/webinars/hybrid-app-development-redefined","https://useappflow.com/resources/solving-mobile-cicd-with-appflow"]},"featuredImage":"how-often-should-your-mobile-team-be-shipping.png","featuredImageAlt":"figure 8 flow path with clock in the middle","related":["https://ionicframework.com/resources/webinars/hybrid-app-development-redefined","https://useappflow.com/resources/solving-mobile-cicd-with-appflow"]},{"title":"What is Mobile CI/CD?","description":"Exploring what Mobile CI/CD is and how it differs from traditional CI/CD, and how Appflow is a leading Mobile CI/CD service.","authorName":"Max Lynch","authorEmail":"max@ionic.io","authorUrl":"https://twitter.com/maxlynch","authorImageName":"max-lynch.jpg","slug":"what-is-mobile-ci-cd","date":"2020-08-18T08:00:00.000Z","contents":"---\ntitle: What is Mobile CI/CD?\ndescription: Exploring what Mobile CI/CD is and how it differs from traditional CI/CD, and how Appflow is a leading Mobile CI/CD service.\nslug: what-is-mobile-ci-cd\nfeaturedImage: what-is-mobile-ci-cd.png\nfeaturedImageAlt: figure 8 with phone in the middle on raised background\ndate: 2020-08-18 08:00:00\nauthor: Max Lynch <max@ionic.io>\nauthorUrl: https://twitter.com/maxlynch\nauthorImageName: max-lynch.jpg\nrelated:\n  - https://ionicframework.com/resources/webinars/hybrid-app-development-redefined\n  - https://useappflow.com/resources/solving-mobile-cicd-with-appflow\n---\n\nContinuous Integration and Continuous Delivery (CI/CD) is one of the fastest growing sectors of the developer market. Focused on enabling teams to continuously test and integrate their apps (instead of doing it all at once before shipping), and then helping teams deliver those apps in an automated fashion, CI/CD has transformed the way developers build and ship software.\n\nA staple in the backend and, more recently, frontend ecosystems, CI/CD services have proliferated to help developers perform a set of tedious tasks on every commit to their app, including:\n\n* Running builds every commit to every branch in a git repo\n* Running test suites and tracking failing and succeeding tests\n* Performing webhooks and other actions after builds\n* Launching or deploying apps to hosting destinations after successful builds\n\nThis list applies to nearly every type of software application, whether it’s a backend, frontend web, or mobile app. This has led to a proliferation of general purpose CI/CD services that integrate with popular code repository hosting services, provide on-demand clean build infrastructure, and a system to trigger actions before and after builds.\n\n<!--more-->\n\n## What about Mobile CI/CD?\n\nMobile app development is one of the most complicated areas of software development when it comes to CI/CD solutions. Given that mobile apps utilize extensive native compilation, rigid operating system requirements, rigorous code signing, frequently-updated SDKs and tooling, complex operating system licensing, device testing, and app store submission, a CI/CD platform for mobile apps will need to have extra features to cover these unique demands.\n\nA proper Mobile CI/CD setup will feature:\n\n* Managed build environments for iOS, Android, and mobile web apps (for teams building Progressive Web Apps)\n* Managed servers and server infrastructure for legal, licensed builds on macOS and Linux.\n* Per-platform tooling: Xcode for iOS, Android SDK for Android, etc.\n* Certificate and profile management for mobile code signing\n* Deployment for web assets for hybrid mobile and Progressive Web Apps\n* Multiple deployment channels to enable easy development, beta, and production tracks\n* Automatic submission to Apple App Store and Google Play Store\n* Frequent security patches and upgrades for safe builds on the latest Apple and Google approved tools and SDKs\n\nThese are specialized mobile tasks that most CI/CD services do not handle, so clearly mobile teams will need mobile-specific CI/CD services and infrastructure.\n\n## What is Appflow?\n\n[Appflow](https://useappflow.com/) is a leading Mobile CI/CD service focused entirely on the unique nature of mobile app development, testing, and delivery. Appflow powers Mobile CI/CD at companies like Burger King, AAA, BCBS, and more. And Appflow is a major part of the Ionic app platform, a set of mobile-focused tools with millions of users and hundreds of major enterprise customers, which powers a significant portion of the Apple App Store and Google Play Store.\n\nAppflow provides fully managed build environments for iOS, Android, and Progressive Web Apps by offering genuine macOS build servers for iOS and Linux for Android and Web apps.\n\nAppflow manages signing certificates for apps and enables direct publishing of built apps to the Apple App Store and Google Play Store.\n\nFor teams building hybrid apps using Capacitor or Cordova (including users of Ionic Framework), Appflow offers some additional features such as the ability to live-update web assets in an app remotely. This means a hybrid app in the app stores can be updated in realtime for changes at the web app layer.\n\nAppflow has a powerful channel system where builds and deployments can be performed across an arbitrary number of environments to enable easy development, alpha/beta, and production builds.\n\nFinally, Appflow offers a flexible automation layer across all of these features for the easy creation of complex workflows and integrating with third party services through webhooks.\n\n## When do you need a Mobile CI/CD Solution?\n\nFor teams building and deploying app store apps, a Mobile CI/CD solution is critical. We work with many teams that are new to mobile and are bringing their existing backend or frontend CI/CD experience to mobile and struggling to adapt to the massive difference in complexity and tooling requirements for Mobile CI/CD.\n\nIt’s simply not feasible for most teams to build or run their own Mobile CI/CD infrastructure, and it’s likely not feasible for teams to add Mobile CI/CD functionality to an existing general purpose CI/CD service like Circle CI, GitHub Actions, or Azure’s various CI/CD offerings. That’s because doing so would require a full time team to build, manage, and keep updated every aspect of the Mobile CI/CD feature set described earlier. Also, the skills needed to build and maintain CI/CD infrastructure are very different from the skills needed to build frontend and mobile apps, so teams would need to hire outside of their team’s core competency.\n\n## Getting Started with Appflow\n\nWe encourage your team to explore the Mobile CI/CD space before making a decision on a platform. Appflow is a great choice for fast-growing startups and SMBs all the way up to the Fortune 1000, with plenty of enterprise-specific features for mission critical apps.\n\nGetting started with Appflow is free. Go to [useappflow.com](https://useappflow.com/), create a free account, and connect your app. Explore the [Appflow Documentation](https://ionicframework.com/docs/appflow) to see the full feature set of Appflow and integrate those features into your apps.\n\nThe Appflow team are also experts in Mobile CI/CD and are available for consultation to help your team build out a winning Mobile CI/CD strategy. Please [get in touch with the team](https://ionicframework.com/enterprise/contact) to see how Appflow and Mobile CI/CD can help your team move faster and ensure quality throughout the app development lifecycle.","preview":"<p>Continuous Integration and Continuous Delivery (CI/CD) is one of the fastest growing sectors of the developer market. Focused on enabling teams to continuously test and integrate their apps (instead of doing it all at once before shipping), and then helping teams deliver those apps in an automated fashion, CI/CD has transformed the way developers build and ship software.</p>\n<p>A staple in the backend and, more recently, frontend ecosystems, CI/CD services have proliferated to help developers perform a set of tedious tasks on every commit to their app, including:</p>\n<ul>\n<li>Running builds every commit to every branch in a git repo</li>\n<li>Running test suites and tracking failing and succeeding tests</li>\n<li>Performing webhooks and other actions after builds</li>\n<li>Launching or deploying apps to hosting destinations after successful builds</li>\n</ul>\n<p>This list applies to nearly every type of software application, whether it’s a backend, frontend web, or mobile app. This has led to a proliferation of general purpose CI/CD services that integrate with popular code repository hosting services, provide on-demand clean build infrastructure, and a system to trigger actions before and after builds.</p>\n","html":"<p>Continuous Integration and Continuous Delivery (CI/CD) is one of the fastest growing sectors of the developer market. Focused on enabling teams to continuously test and integrate their apps (instead of doing it all at once before shipping), and then helping teams deliver those apps in an automated fashion, CI/CD has transformed the way developers build and ship software.</p>\n<p>A staple in the backend and, more recently, frontend ecosystems, CI/CD services have proliferated to help developers perform a set of tedious tasks on every commit to their app, including:</p>\n<ul>\n<li>Running builds every commit to every branch in a git repo</li>\n<li>Running test suites and tracking failing and succeeding tests</li>\n<li>Performing webhooks and other actions after builds</li>\n<li>Launching or deploying apps to hosting destinations after successful builds</li>\n</ul>\n<p>This list applies to nearly every type of software application, whether it’s a backend, frontend web, or mobile app. This has led to a proliferation of general purpose CI/CD services that integrate with popular code repository hosting services, provide on-demand clean build infrastructure, and a system to trigger actions before and after builds.</p>\n<!--more-->\n\n<h2 id=\"what-about-mobile-cicd\">What about Mobile CI/CD?</h2>\n<p>Mobile app development is one of the most complicated areas of software development when it comes to CI/CD solutions. Given that mobile apps utilize extensive native compilation, rigid operating system requirements, rigorous code signing, frequently-updated SDKs and tooling, complex operating system licensing, device testing, and app store submission, a CI/CD platform for mobile apps will need to have extra features to cover these unique demands.</p>\n<p>A proper Mobile CI/CD setup will feature:</p>\n<ul>\n<li>Managed build environments for iOS, Android, and mobile web apps (for teams building Progressive Web Apps)</li>\n<li>Managed servers and server infrastructure for legal, licensed builds on macOS and Linux.</li>\n<li>Per-platform tooling: Xcode for iOS, Android SDK for Android, etc.</li>\n<li>Certificate and profile management for mobile code signing</li>\n<li>Deployment for web assets for hybrid mobile and Progressive Web Apps</li>\n<li>Multiple deployment channels to enable easy development, beta, and production tracks</li>\n<li>Automatic submission to Apple App Store and Google Play Store</li>\n<li>Frequent security patches and upgrades for safe builds on the latest Apple and Google approved tools and SDKs</li>\n</ul>\n<p>These are specialized mobile tasks that most CI/CD services do not handle, so clearly mobile teams will need mobile-specific CI/CD services and infrastructure.</p>\n<h2 id=\"what-is-appflow\">What is Appflow?</h2>\n<p><a href=\"https://useappflow.com/\">Appflow</a> is a leading Mobile CI/CD service focused entirely on the unique nature of mobile app development, testing, and delivery. Appflow powers Mobile CI/CD at companies like Burger King, AAA, BCBS, and more. And Appflow is a major part of the Ionic app platform, a set of mobile-focused tools with millions of users and hundreds of major enterprise customers, which powers a significant portion of the Apple App Store and Google Play Store.</p>\n<p>Appflow provides fully managed build environments for iOS, Android, and Progressive Web Apps by offering genuine macOS build servers for iOS and Linux for Android and Web apps.</p>\n<p>Appflow manages signing certificates for apps and enables direct publishing of built apps to the Apple App Store and Google Play Store.</p>\n<p>For teams building hybrid apps using Capacitor or Cordova (including users of Ionic Framework), Appflow offers some additional features such as the ability to live-update web assets in an app remotely. This means a hybrid app in the app stores can be updated in realtime for changes at the web app layer.</p>\n<p>Appflow has a powerful channel system where builds and deployments can be performed across an arbitrary number of environments to enable easy development, alpha/beta, and production builds.</p>\n<p>Finally, Appflow offers a flexible automation layer across all of these features for the easy creation of complex workflows and integrating with third party services through webhooks.</p>\n<h2 id=\"when-do-you-need-a-mobile-cicd-solution\">When do you need a Mobile CI/CD Solution?</h2>\n<p>For teams building and deploying app store apps, a Mobile CI/CD solution is critical. We work with many teams that are new to mobile and are bringing their existing backend or frontend CI/CD experience to mobile and struggling to adapt to the massive difference in complexity and tooling requirements for Mobile CI/CD.</p>\n<p>It’s simply not feasible for most teams to build or run their own Mobile CI/CD infrastructure, and it’s likely not feasible for teams to add Mobile CI/CD functionality to an existing general purpose CI/CD service like Circle CI, GitHub Actions, or Azure’s various CI/CD offerings. That’s because doing so would require a full time team to build, manage, and keep updated every aspect of the Mobile CI/CD feature set described earlier. Also, the skills needed to build and maintain CI/CD infrastructure are very different from the skills needed to build frontend and mobile apps, so teams would need to hire outside of their team’s core competency.</p>\n<h2 id=\"getting-started-with-appflow\">Getting Started with Appflow</h2>\n<p>We encourage your team to explore the Mobile CI/CD space before making a decision on a platform. Appflow is a great choice for fast-growing startups and SMBs all the way up to the Fortune 1000, with plenty of enterprise-specific features for mission critical apps.</p>\n<p>Getting started with Appflow is free. Go to <a href=\"https://useappflow.com/\">useappflow.com</a>, create a free account, and connect your app. Explore the <a href=\"https://ionicframework.com/docs/appflow\">Appflow Documentation</a> to see the full feature set of Appflow and integrate those features into your apps.</p>\n<p>The Appflow team are also experts in Mobile CI/CD and are available for consultation to help your team build out a winning Mobile CI/CD strategy. Please <a href=\"https://ionicframework.com/enterprise/contact\">get in touch with the team</a> to see how Appflow and Mobile CI/CD can help your team move faster and ensure quality throughout the app development lifecycle.</p>\n","meta":{"title":"What is Mobile CI/CD?","description":"Exploring what Mobile CI/CD is and how it differs from traditional CI/CD, and how Appflow is a leading Mobile CI/CD service.","slug":"what-is-mobile-ci-cd","featuredImage":"what-is-mobile-ci-cd.png","featuredImageAlt":"figure 8 with phone in the middle on raised background","date":"2020-08-18T08:00:00.000Z","author":"Max Lynch <max@ionic.io>","authorUrl":"https://twitter.com/maxlynch","authorImageName":"max-lynch.jpg","related":["https://ionicframework.com/resources/webinars/hybrid-app-development-redefined","https://useappflow.com/resources/solving-mobile-cicd-with-appflow"]},"featuredImage":"what-is-mobile-ci-cd.png","featuredImageAlt":"figure 8 with phone in the middle on raised background","related":["https://ionicframework.com/resources/webinars/hybrid-app-development-redefined","https://useappflow.com/resources/solving-mobile-cicd-with-appflow"]}]